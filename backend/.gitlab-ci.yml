# ------------- VARIABLES
# configure them in https://gitlab.satoshiengineering.com/satoshiengineering/lightning-tip-cards/-/settings/ci_cd
# - BACKEND_DEPLOY_SERVER_MAIN
# - BACKEND_DEPLOY_SERVER_DEVELOP
# - BACKEND_DEPLOY_PATH_MAIN
# - BACKEND_DEPLOY_PATH_DEVELOP
# - BACKEND_PM2_APP_NAME_MAIN # used to identifiy in ecosystem.config.js
# - BACKEND_PM2_APP_NAME_DEVELOP # used to identifiy in ecosystem.config.js
# - BACKEND_ENV_FILE_MAIN
# - BACKEND_ENV_FILE_DEVELOP

# ------------- BASE CONFIG OF THE JOBS
# Create Artifact with current ref or tag name (using the slug)
.backend-artifacts_config:
  artifacts:
    name: "backend-$CI_COMMIT_REF_SLUG"
    paths:
      - backend/build
      - backend/node_modules
      - backend/.env
      - backend/ecosystem.config.js

# ------------- STAGE SETUP
backend-setup-env:
  stage: setup
  extends:
    - .base_config
    - .deployable_branches_rules
  cache:
    policy: pull-push # Upload the cache after it's done
  script:
    # get the .env variables for the environment
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then export ENV_FILE=$BACKEND_ENV_FILE_MAIN; fi
    - if [ "$CI_COMMIT_BRANCH" == "develop" ]; then export ENV_FILE=$BACKEND_ENV_FILE_DEVELOP; fi
    - cd backend
    - |
      # Check if env file exists
      if [ -f "$ENV_FILE" ]; then
        cp $ENV_FILE .env
      else
        echo -e "\e[31mERROR:ENV_FILE_[ENVIRONMENT/BRANCH] not set in Gitlab CI/CD variables\e[0m"
        exit 1
      fi
    # Compare env vars with .env.example
    - |
     cat .env.example | while read line; do
        # Exclude comments
        if [[ "$line" =~ ^# ]]; then continue; fi
        # Exclude non key=var lines
        if [[ "$line" != *\=* ]]; then continue; fi
        # String split to KEY and VALUE
        savedIFS="$IFS"
        IFS="\="
        set x $line
        KEY=$2
        IFS="$savedIFS"
        # Find key in .env file
        echo "Checking: $KEY"
        if grep -Fq "$KEY=" .env
        then
          echo "âœ… $KEY"
        else
          echo -e "\e[31mERROR:ENV variable $KEY not set in Gitlab CI/CD variables\e[0m"
          exit 1
        fi	
      done

backend-setup-npm:
  stage: setup
  extends: .base_config
  cache:
    policy: pull-push # Upload the cache after it's done
  script:
    - cd backend
    - npm ci

# ------------- STAGE TEST
backend-audit:
  stage: test
  extends: .base_config
  script:
    - cd backend
    - npm audit

# ------------- STAGE DEPLOY (& BUILD)
backend-build:
  stage: deploy
  extends:
    - .base_config
    - .backend-artifacts_config
  script:
    - cd backend
    - npm run build

.backend-deploy_config:
  image: alpine
  stage: deploy
  needs: [backend-build]
  variables:
    NODE_ENV: production
    GIT_STRATEGY: none
  extends:
    - .base_config
    - .backend-artifacts_config
  cache: {} # Disable Cache
  before_script:
    - apk update && apk add openssh-client rsync
    - mkdir ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no" >> ~/.ssh/config
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_USER_SSH_KEY" | ssh-add -
  script:
    - | 
      if [ "$CI_COMMIT_BRANCH" == "main" ]
      then 
        echo "Deploying on Environment Main"
        export DEPLOY_SERVER=$BACKEND_DEPLOY_SERVER_MAIN
        export DEPLOY_PATH=$BACKEND_DEPLOY_PATH_MAIN
        export PM2_APP_NAME=$BACKEND_PM2_APP_NAME_MAIN
      elif [ "$CI_COMMIT_BRANCH" == "develop" ]
      then
        echo "Deploying on Environment Develop"
        export DEPLOY_SERVER=$BACKEND_DEPLOY_SERVER_DEVELOP
        export DEPLOY_PATH=$BACKEND_DEPLOY_PATH_DEVELOP
        export PM2_APP_NAME=$BACKEND_PM2_APP_NAME_DEVELOP
      else
        echo "ERROR: this branch $CI_COMMIT_BRANCH is not allowed to run this job! Wake up your devops team!"
        exit 1
      fi
    - echo "Deploying with user $DEPLOY_USER on server $DEPLOY_SERVER to path $DEPLOY_PATH"
    - cd backend
    # RSYNC Dist
    - rsync -atv --delete --progress ./ $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH/dist-node-next
    - | 
      ssh $DEPLOY_USER@$DEPLOY_SERVER /bin/bash -s << EOT
      
      # 1) Stop pm2
      if [ -d $DEPLOY_PATH/dist-node ]; then
        cd $DEPLOY_PATH/dist-node
        PM2_HOME=/var/www/.pm2/ pm2 delete ecosystem.config.js --only $PM2_APP_NAME
        cd $DEPLOY_PATH
      else
        echo "No $DEPLOY_PATH/dist-node dir found, skipping pm2 delete"
      fi

      # 2) Remove old dist-node-previous dir
      rm -rf $DEPLOY_PATH/dist-node-previous

      # 3) Save current dist to previous
      if [ -d $DEPLOY_PATH/dist-node ]; then
        mv $DEPLOY_PATH/dist-node $DEPLOY_PATH/dist-node-previous
      fi

      # 4) Make new dist available
      mv $DEPLOY_PATH/dist-node-next $DEPLOY_PATH/dist-node

      # 5) Start pm2
      cd $DEPLOY_PATH/dist-node      
      PM2_HOME=/var/www/.pm2/ pm2 start ecosystem.config.js --only $PM2_APP_NAME

      # 6) save pm2
      PM2_HOME=/var/www/.pm2/ pm2 save
      
      EOT

backend-deploy-develop:
  extends: .backend-deploy_config
  environment:
    name: develop
  rules:
    - if: $CI_COMMIT_BRANCH != 'develop'
      when: never
    - !reference [.base_config, rules]

backend-deploy-main:
  extends: .backend-deploy_config
  environment:
    name: main
  rules:
    - if: $CI_COMMIT_BRANCH != 'main'
      when: never
    - !reference [.base_config, rules]

# ------------- STAGE CLEANUP
backend-cleanup:
  image: alpine
  stage: cleanup
  extends: .base_config
  script:
    - echo "Cleaning up the cache"
    - rm -rf "%CACHE_PATH%/%CI_PIPELINE_ID%"
  when: on_success

# ------------- STAGE INTEGRATION
backend-test-integration:
  stage: integration
  cache: {} # Disable Cache
  variables:
    NODE_ENV: test
  rules:
    - !reference [.deployable_branches_rules, rules]
    # Exclude other schedules
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $SCHEDULE_JOB != 'NIGHTLY_INTEGRATION'
      when: never
    # Only run the job if its manual (web), commit push or scheduled
    - if: $CI_PIPELINE_SOURCE == 'web' || $CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'schedule'
      when: on_success
    - when: never
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]
      then 
        echo "Running on Main Branch"
        export ENV_FILE=$BACKEND_ENV_FILE_MAIN
      elif [ "$CI_COMMIT_BRANCH" == "develop" ]
      then
        echo "Running on develop Branch"
        export ENV_FILE=$BACKEND_ENV_FILE_DEVELOP
      else
        echo "ERROR: this branch $CI_COMMIT_BRANCH is not allowed to run this job! Wake up your devops team!"
        exit 1
      fi
      
    # Check if env file exists
    - cd backend
    - |
      if [ -f "$ENV_FILE" ]; then
        cp $ENV_FILE .env
      else
        echo -e "\e[31mERROR:BACKEND_ENV_FILE_[ENVIRONMENT/BRANCH] not set in Gitlab CI/CD variables\e[0m"
        exit 1
      fi
    - echo "Running Intergration Test on branch $CI_COMMIT_BRANCH with url $TEST_ORIGIN"
    - npm ci --include=dev
    - npm run test-integration
